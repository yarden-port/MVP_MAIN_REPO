name: Promote Production

on:
  workflow_dispatch:
    inputs:
      port_payload:
        required: true
        description: >-
          Port's payload, including details for who triggered the action and
          general context (blueprint, run id, etc...)
jobs:
  promote-deployment:
    runs-on: ubuntu-latest
    steps:
      - name: Inform execution of request to promote deployment image
        uses: port-labs/port-github-action@v1
        with:
          clientId: ${{ secrets.PORT_CLIENT_ID }}
          clientSecret: ${{ secrets.PORT_CLIENT_SECRET }}
          baseUrl: https://api.getport.io
          operation: PATCH_RUN
          runId: ${{fromJson(github.event.inputs.port_payload).context.runId}}
          logMessage: "About to promote deployment image from staging to production..."

      - name: Get the current staging image
        id: get-staging
        uses: port-labs/port-github-action@v1
        with:
          clientId: ${{ secrets.PORT_CLIENT_ID }}
          clientSecret: ${{ secrets.PORT_CLIENT_SECRET }}
          baseUrl: https://api.getport.io
          operation: GET
          blueprint: running_service
          identifier: ${{fromJson(github.event.inputs.port_payload).payload.entity.relations.test_runtime }}
          runId: ${{ fromJson(github.event.inputs.port_payload).context.runId }}
          logMessage: "Getting the current staging image..."

      - name: Set the production image
        id: set-production
        uses: port-labs/port-github-action@v1
        with:
          clientId: ${{ secrets.PORT_CLIENT_ID }}
          clientSecret: ${{ secrets.PORT_CLIENT_SECRET }}
          operation: UPSERT
          identifier: ${{fromJson(github.event.inputs.port_payload).payload.entity.relations.prod_runtime }}
          blueprint: running_service
          runId: ${{ fromJson(github.event.inputs.port_payload).context.runId }}
          logMessage: "Updating the production image..."          
          relations: |
            {
              "image": "${{ fromJson(steps.get-staging.outputs.entity).relations.image }}"
            }
      
      - uses: actions/checkout@v3      
      - name: Create PR
        id: create-pr
        uses: fjogeleit/yaml-update-action@main
        with:
          valueFile: 'environments/production/app/deployment.yaml' 
          propertyPath: 'spec.template.spec.containers[0].image' 
          value: ${{fromJson(github.event.inputs.port_payload).payload.entity.relations.prod_runtime }}':bad-image'
          commitChange: true
          token: ${{ secrets.ORG_ADMIN_TOKEN }}
          targetBranch: main
          masterBranchName: main
          createPR: true
          branch: deployment/restore_env
          message: 'Update deployment image to bad-image'
          
      - name: Merge Pull Request
        env:
          GH_TOKEN: ${{ secrets.ORG_ADMIN_TOKEN }}
          PR_URL: ${{ fromJson(steps.create-pr.outputs.pull_request).url }}
        run: |
          HTTP_STATUS=$(curl -s -o /dev/null -w "%{http_code}" \
          -X PUT \
          -H "Accept: application/vnd.github+json" \
          -H "Authorization: Bearer $GH_TOKEN" \
          "$PR_URL/merge")

          echo "HTTP Status: $HTTP_STATUS"

          if [ $HTTP_STATUS -eq 200 ]; then
          echo "Pull request merged successfully."
          echo "merge_status=successful" >> $GITHUB_ENV
          else
          echo "Failed to merge PR. HTTP Status: $HTTP_STATUS"
          echo "merge_status=unsuccessful" >> $GITHUB_ENV
          fi

      - name: Inform Port about pull request creation status - Success
        if: steps.set-production.outcome == 'success'
        uses: port-labs/port-github-action@v1
        with:
          clientId: ${{ secrets.PORT_CLIENT_ID }}
          clientSecret: ${{ secrets.PORT_CLIENT_SECRET }}
          baseUrl: https://api.getport.io
          operation: PATCH_RUN
          runId: ${{ fromJson(github.event.inputs.port_payload).context.runId }}
          logMessage: |
            The production image has been updated successfully

      - name: Inform Port about pull request creation status - Failure
        if: steps.set-production.outcome != 'success'
        uses: port-labs/port-github-action@v1
        with:
          clientId: ${{ secrets.PORT_CLIENT_ID }}
          clientSecret: ${{ secrets.PORT_CLIENT_SECRET }}
          baseUrl: https://api.getport.io
          operation: PATCH_RUN
          runId: ${{ fromJson(github.event.inputs.port_payload).context.runId }}
          logMessage: |
            The promotion of the image to production failed.
