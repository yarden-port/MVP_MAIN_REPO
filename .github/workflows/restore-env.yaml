name: Restore env

on:
  workflow_dispatch: # Allows manual trigger

jobs:
  update-image-tag:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Create PR
      id: create-pr
      uses: fjogeleit/yaml-update-action@main
      with:
        valueFile: 'environments/production/app/deployment.yaml' 
        propertyPath: 'spec.template.spec.containers[0].image' 
        value: 'payments:bad-image'
        commitChange: true
        token: ${{ secrets.ORG_ADMIN_TOKEN }}
        targetBranch: main
        masterBranchName: main
        createPR: true
        branch: deployment/restore_env
        message: 'Update deployment image to bad-image'

    - name: Merge Pull Request
      env:
        GH_TOKEN: ${{ secrets.ORG_ADMIN_TOKEN }}
        PR_URL: ${{ fromJson(steps.create-pr.outputs.pull_request).url }}
      run: |
        HTTP_STATUS=$(curl -s -o /dev/null -w "%{http_code}" \
        -X PUT \
        -H "Accept: application/vnd.github+json" \
        -H "Authorization: Bearer $GH_TOKEN" \
        "$PR_URL/merge")

        echo "HTTP Status: $HTTP_STATUS"

        if [ $HTTP_STATUS -eq 200 ]; then
        echo "Pull request merged successfully."
        echo "merge_status=successful" >> $GITHUB_ENV
        else
        echo "Failed to merge PR. HTTP Status: $HTTP_STATUS"
        echo "merge_status=unsuccessful" >> $GITHUB_ENV
        fi

    - name: Set the production image
      id: set-production
      uses: port-labs/port-github-action@v1
      with:
        clientId: ${{ secrets.PORT_CLIENT_ID }}
        clientSecret: ${{ secrets.PORT_CLIENT_SECRET }}
        operation: UPSERT
        identifier: "payments_prod_eu"
        blueprint: running_service
        logMessage: "Updating the production image..."          
        relations: |
            {
                "image": "payments_1_1"
            }

    - name: Set up Python for restore script
      uses: actions/setup-python@v2
      with:
        python-version: '3.8' # Ensure this matches the version required by your scripts

    - name: Install dependencies
      run: |
        pip install -r /restoreEnv/requirements.txt

    - name: Execute Restore Script
      env:
        PORT_CLIENT_ID: ${{ secrets.PORT_CLIENT_ID }}
        PORT_CLIENT_SECRET: ${{ secrets.PORT_CLIENT_SECRET }}
        # Add any other environment variables required by the restore script here
      run: |
        bash restore.sh
    # Make sure restore.sh and any other scripts or files it depends on are in your repository